#!/bin/bash

__FILE__=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd)/`basename "${BASH_SOURCE[0]}"`
__DIR__=$(dirname "${__FILE__}")
. $__DIR__/common.inc

NAME=libvmaf
VERSION=2.3.1

# FFmpeg "model_path" default value is "/usr/local/share/model/vmaf_v0.6.1.pkl"
# See also https://github.com/FFmpeg/FFmpeg/blob/master/libavfilter/vf_libvmaf.c
AVOPTION_LIBVMAF_MODEL_PATH=/usr/local/share/model

do_download()
{
  info "Download $NAME [ ${C_RUN}${VERSION}${C_INFO} ] ..."
  cd_src
  if ! wget https://github.com/Netflix/vmaf/archive/v${VERSION}.tar.gz -O libvmaf-${VERSION}.tar.gz; then
    error "Failed to download $NAME"
  fi
  info "Download complete"
}

do_unpack()
{
  info "Unpack $NAME [ ${C_RUN}${VERSION}${C_INFO} ] ..."
  cd_src
  if ! tar xzvf libvmaf-${VERSION}.tar.gz; then
    error "Failed to unpack $NAME"
  fi
  info "Unpack complete"
}

do_configure()
{
  info "Configure $NAME [ ${C_RUN}${VERSION}${C_INFO} ] ..."
  cd_src vmaf-${VERSION}/libvmaf
  if ! meson build -Denable_tests=false -Denable_docs=false --default-library=static --buildtype=release --prefix="$BUILD_DIR" --libdir=lib; then
    error "Failed to configure $NAME"
  fi
  info "Configuration complete"
}

do_compile()
{
  info "Compile $NAME [ ${C_RUN}${VERSION}${C_INFO} ] ..."
  cd_src vmaf-${VERSION}/libvmaf
  if ! ninja -vC build; then
    error "Failed to compile $NAME"
  fi
  info "Compilation complete"
}

do_install()
{
  info "Install $NAME [ ${C_RUN}${VERSION}${C_INFO} ] ..."
  cd_src vmaf-${VERSION}/libvmaf
  if ! ninja -vC build install; then
    error "Failed to install $NAME"
  fi
  cd_src vmaf-${VERSION}
  if ! cp -r model $BUILD_DIR/share/; then
    error "Failed to copy $NAME model directory"
  fi
  info "Installation complete"
}

do_clean()
{
  info "Clean $NAME [ ${C_RUN}${VERSION}${C_INFO} ] ..."
  cd_src vmaf-${VERSION}/libvmaf
  if ! rm -rf ./build; then
    error "Failed to clean $NAME"
  fi
  info "Clean complete"
}

do_create_model_symlink()
{
  if [ -L $AVOPTION_LIBVMAF_MODEL_PATH ]; then
    if ! rm $AVOPTION_LIBVMAF_MODEL_PATH; then
      error "Failed to unlink $NAME model directory"
    fi
  fi
  if [ ! -d $AVOPTION_LIBVMAF_MODEL_PATH ]; then
    if ! ln -s $1/share/model $AVOPTION_LIBVMAF_MODEL_PATH; then
      error "Failed to create $NAME model directory symlink"
    fi
    info "$AVOPTION_LIBVMAF_MODEL_PATH symbolic link created"
  fi
}

# Run by chbuild script ($2 is build directory)
if [ "$1" == "link" ]; then
  do_create_model_symlink "$2"
  exit 0
fi

main $*
